# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w80BPg8M3hd175QNpA8Fb99l6WCx6jjL
"""

import re
import csv
from collections import Counter, defaultdict

# Configurable threshold for suspicious activity detection
FAILED_LOGIN_THRESHOLD = 10

# File paths
LOG_FILE = "sample.log"
OUTPUT_CSV = "log_analysis_results.csv"

def parse_log_file(log_file):
    """Parse the log file and extract relevant data."""
    ip_requests = Counter()
    endpoint_accesses = Counter()
    failed_login_attempts = defaultdict(int)

    with open(log_file, 'r') as file:
        for line in file:
            # Regex for extracting IP, request type, endpoint, status code
            match = re.match(
                r'(?P<ip>\d+\.\d+\.\d+\.\d+) - - \[.*\] "(?P<method>\w+) (?P<endpoint>/\S*) HTTP/\d\.\d" (?P<status>\d+)',
                line
            )
            if match:
                ip = match.group("ip")
                endpoint = match.group("endpoint")
                status = int(match.group("status"))

                # Count IP requests
                ip_requests[ip] += 1

                # Count endpoint accesses
                endpoint_accesses[endpoint] += 1

                # Count failed login attempts
                if status == 401 or "Invalid credentials" in line:
                    failed_login_attempts[ip] += 1

    return ip_requests, endpoint_accesses, failed_login_attempts

def write_to_csv(ip_requests, most_accessed, failed_attempts, output_file):
    """Write results to a CSV file with section separators."""
    with open(output_file, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)

        # Write Requests per IP
        writer.writerow(["Requests per IP"])
        writer.writerow(["IP Address", "Request Count"])
        for ip, count in ip_requests.items():
            writer.writerow([ip, count])
        writer.writerow(["---------------------------------------"])

        # Write Most Accessed Endpoint
        writer.writerow(["Most Accessed Endpoint"])
        writer.writerow(["Endpoint", "Access Count"])
        writer.writerow([most_accessed[0], most_accessed[1]])
        writer.writerow(["---------------------------------------"])

        # Write Suspicious Activity
        writer.writerow(["Suspicious Activity"])
        suspicious_found = False
        for ip, count in failed_attempts.items():
            if count > FAILED_LOGIN_THRESHOLD:
              if not suspicious_found:
                  print("IP Address           Failed Login Attempts")
                  suspicious_found = True
              writer.writerow([ip, count])

        if not suspicious_found:
            writer.writerow(["Suspicious Activity Not Detected"])

        # Add separator at the end
        writer.writerow(["--------------------------------------"])

def main():
    # Parse the log file
    ip_requests, endpoint_accesses, failed_login_attempts = parse_log_file(LOG_FILE)

    # Identify the most accessed endpoint
    most_accessed = max(endpoint_accesses.items(), key=lambda x: x[1])

    # Display results in the terminal
    print()
    print("Requests per IP:")
    print()
    for ip, count in ip_requests.most_common():
        print(f"{ip:<20} {count}")
    print("-----------------------------------------")

    print()
    print("Most Frequently Accessed Endpoint:")
    print()
    print(f"{most_accessed[0]} (Accessed {most_accessed[1]} times)")
    print("-----------------------------------------")

    print()
    print("Suspicious Activity Detected:")
    print()
    suspicious_found = False
    for ip, count in failed_login_attempts.items():
        if count > FAILED_LOGIN_THRESHOLD:
            if not suspicious_found:
                print("IP Address           Failed Login Attempts")
                suspicious_found = True
            print(f"{ip:<20} {count}")

    if not suspicious_found:
        print("Suspicious Activity Not Detected")
    print("-----------------------------------------")

    # Write results to CSV
    write_to_csv(ip_requests, most_accessed, failed_login_attempts, OUTPUT_CSV)
    print(f"Results have been saved to {OUTPUT_CSV}")

if __name__ == "__main__":
    main()